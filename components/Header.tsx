import {
  Image,
  Flex,
  List,
  ListItem,
  Button,
  IconButton,
  Box,
} from "@chakra-ui/react";
import { useState } from "react";

const Header = ({
  setScrollToPage,
  colorMode,
  setColorMode,
}: {
  setScrollToPage: (pageNum: number) => void;
  colorMode: "light" | "dark";
  setColorMode: (mode: "light" | "dark") => void;
}) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Flex
      p={{ base: 4, sm: 6, md: 8 }}
      align="center"
      pos="absolute"
      top={0}
      left={0}
      ml={{ base: isOpen ? 4 : -8, md: 4 }}
      color={colorMode === "dark" ? "white" : "black"}
      fontSize="18px"
      zIndex={1000}
      flexDir={{ base: "column", md: "row" }}
      pt={4}
      mt={{ base: isOpen ? 4 : 0, md: 4 }}
      transition="0.2s all ease-out"
      bg={{
        base: isOpen ? (colorMode === "dark" ? "black" : "white") : "none",
        md: "none",
      }}
      border={{
        base: isOpen
          ? colorMode === "dark"
            ? "2px solid white"
            : "2px solid black"
          : "none",
        md: "none",
      }}
    >
      <Button
        transform={`rotate(${isOpen ? 90 : 0}deg)`}
        transition="0.2s all ease-out"
        _active={{}}
        bg="transparent"
        p={4}
        py={{ base: 4, md: 6 }}
        m={0}
        onClick={() => setIsOpen(!isOpen)}
        _hover={{ transform: `rotate(${isOpen ? 90 : 0}deg) scale(1.2)` }}
      >
        <Box
          w={{ base: "24px", sm: "28px", md: "32px" }}
          h="auto"
          aria-label="Menu"
          transition="0.2s all ease-out"
          cursor="pointer"
        >
          <svg
            width="100%"
            height="100%"
            viewBox="0 0 32 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <line
              x1="1.5"
              y1="1.5"
              x2="30.5"
              y2="1.5"
              stroke={colorMode === "dark" ? "white" : "black"}
              strokeWidth="3"
              strokeLinecap="round"
            />
            <line
              x1="1.5"
              y1="12"
              x2="30.5"
              y2="12"
              stroke={colorMode === "dark" ? "white" : "black"}
              strokeWidth="3"
              strokeLinecap="round"
            />
            <line
              x1="1.5"
              y1="22.5"
              x2="30.5"
              y2="22.5"
              stroke={colorMode === "dark" ? "white" : "black"}
              strokeWidth="3"
              strokeLinecap="round"
            />
          </svg>
        </Box>
      </Button>

      <List
        display="flex"
        alignItems="center"
        flexDir={{ base: "column", md: "row" }}
        gap={{ base: 8, md: 10 }}
        mt={{ base: 8, md: 0 }}
        ml={{ base: 0, md: 10 }}
        opacity={isOpen ? 1 : 0}
        transform={{ base: "", md: `translateX(${isOpen ? 0 : -96}px)` }}
        transition="0.2s all ease-out"
        pointerEvents={isOpen ? "auto" : "none"}
      >
        <NavLink id={1} text="About me" setScrollToPage={setScrollToPage} />
        <NavLink id={2} text="Tools" setScrollToPage={setScrollToPage} />
        <NavLink id={3} text="Portfolio" setScrollToPage={setScrollToPage} />
        <NavLink id={4} text="Contact" setScrollToPage={setScrollToPage} />
        <IconButton
          p={4}
          aria-label={colorMode === "dark" ? "Light mode" : "Dark mode"}
          bg="none"
          w="fit-content"
          onClick={() => {
            colorMode === "dark" ? setColorMode("light") : setColorMode("dark");
            setScrollToPage(0);
          }}
          transition="0.2s all ease-out"
          _hover={{ transform: "scale(1.1)", cursor: "pointer" }}
          _active={{ transform: "scale(1.2)" }}
        >
          <Box
            w="20px"
            h="24px"
            aria-label={colorMode === "dark" ? "Light mode" : "Dark mode"}
            cursor="pointer"
          >
            {colorMode === "dark" ? (
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clipPath="url(#clip0_302_2)">
                  <path
                    d="M12 5.25C10.665 5.25 9.35993 5.64588 8.2499 6.38758C7.13987 7.12928 6.2747 8.18349 5.76381 9.41689C5.25292 10.6503 5.11925 12.0075 5.3797 13.3169C5.64015 14.6262 6.28302 15.829 7.22703 16.773C8.17103 17.717 9.37377 18.3599 10.6831 18.6203C11.9925 18.8808 13.3497 18.7471 14.5831 18.2362C15.8165 17.7253 16.8707 16.8601 17.6124 15.7501C18.3541 14.6401 18.75 13.335 18.75 12C18.7475 10.2106 18.0356 8.4951 16.7702 7.22977C15.5049 5.96444 13.7894 5.25248 12 5.25ZM12 16.5C11.11 16.5 10.24 16.2361 9.49993 15.7416C8.75991 15.2471 8.18314 14.5443 7.84254 13.7221C7.50195 12.8998 7.41283 11.995 7.58647 11.1221C7.7601 10.2492 8.18868 9.44736 8.81802 8.81802C9.44736 8.18868 10.2492 7.7601 11.1221 7.58647C11.995 7.41283 12.8998 7.50195 13.7221 7.84254C14.5443 8.18314 15.2471 8.75991 15.7416 9.49993C16.2361 10.24 16.5 11.11 16.5 12C16.5 13.1935 16.0259 14.3381 15.182 15.182C14.3381 16.0259 13.1935 16.5 12 16.5ZM10.875 2.625V1.875C10.875 1.57663 10.9935 1.29048 11.2045 1.0795C11.4155 0.868526 11.7016 0.75 12 0.75C12.2984 0.75 12.5845 0.868526 12.7955 1.0795C13.0065 1.29048 13.125 1.57663 13.125 1.875V2.625C13.125 2.92337 13.0065 3.20952 12.7955 3.4205C12.5845 3.63147 12.2984 3.75 12 3.75C11.7016 3.75 11.4155 3.63147 11.2045 3.4205C10.9935 3.20952 10.875 2.92337 10.875 2.625ZM17.8312 6.16875C17.7264 6.06423 17.6432 5.94004 17.5864 5.8033C17.5296 5.66655 17.5004 5.51994 17.5004 5.37187C17.5004 5.22381 17.5296 5.0772 17.5864 4.94045C17.6432 4.80371 17.7264 4.67952 17.8312 4.575L18.3656 4.04062C18.577 3.82928 18.8636 3.71055 19.1625 3.71055C19.4614 3.71055 19.748 3.82928 19.9594 4.04063C20.1707 4.25197 20.2895 4.53861 20.2895 4.8375C20.2895 5.13639 20.1707 5.42303 19.9594 5.63437L19.425 6.16875C19.3203 6.27313 19.196 6.35584 19.0592 6.41214C18.9225 6.46844 18.776 6.49724 18.6281 6.49688C18.3299 6.49558 18.0439 6.37784 17.8312 6.16875ZM23.25 12C23.25 12.2984 23.1315 12.5845 22.9205 12.7955C22.7095 13.0065 22.4234 13.125 22.125 13.125H21.375C21.0766 13.125 20.7905 13.0065 20.5795 12.7955C20.3685 12.5845 20.25 12.2984 20.25 12C20.25 11.7016 20.3685 11.4155 20.5795 11.2045C20.7905 10.9935 21.0766 10.875 21.375 10.875H22.125C22.4234 10.875 22.7095 10.9935 22.9205 11.2045C23.1315 11.4155 23.25 11.7016 23.25 12ZM19.9594 18.3656C20.1667 18.5791 20.2827 18.8649 20.2827 19.1625C20.2827 19.4601 20.1667 19.7459 19.9594 19.9594C19.7456 20.1668 19.4604 20.2843 19.1625 20.2875C19.0146 20.2879 18.8681 20.2591 18.7314 20.2028C18.5947 20.1465 18.4704 20.0638 18.3656 19.9594L17.8312 19.425C17.6199 19.2137 17.5012 18.927 17.5012 18.6281C17.5012 18.3292 17.6199 18.0426 17.8312 17.8312C18.0426 17.6199 18.3292 17.5012 18.6281 17.5012C18.927 17.5012 19.2137 17.6199 19.425 17.8312L19.9594 18.3656ZM13.125 21.375V22.125C13.125 22.4234 13.0065 22.7095 12.7955 22.9205C12.5845 23.1315 12.2984 23.25 12 23.25C11.7016 23.25 11.4155 23.1315 11.2045 22.9205C10.9935 22.7095 10.875 22.4234 10.875 22.125V21.375C10.875 21.0766 10.9935 20.7905 11.2045 20.5795C11.4155 20.3685 11.7016 20.25 12 20.25C12.2984 20.25 12.5845 20.3685 12.7955 20.5795C13.0065 20.7905 13.125 21.0766 13.125 21.375ZM6.16875 17.8312C6.27363 17.9358 6.35685 18.06 6.41363 18.1967C6.47041 18.3335 6.49964 18.4801 6.49964 18.6281C6.49964 18.7762 6.47041 18.9228 6.41363 19.0595C6.35685 19.1963 6.27363 19.3205 6.16875 19.425L5.63437 19.9594C5.52963 20.0638 5.40534 20.1465 5.2686 20.2028C5.13187 20.2591 4.98537 20.2879 4.8375 20.2875C4.53965 20.2843 4.2544 20.1668 4.04062 19.9594C3.8333 19.7459 3.71733 19.4601 3.71733 19.1625C3.71733 18.8649 3.8333 18.5791 4.04062 18.3656L4.575 17.8312C4.67952 17.7264 4.80371 17.6432 4.94045 17.5864C5.0772 17.5296 5.22381 17.5004 5.37187 17.5004C5.51994 17.5004 5.66655 17.5296 5.8033 17.5864C5.94004 17.6432 6.06423 17.7264 6.16875 17.8312ZM3.75 12C3.75 12.2984 3.63147 12.5845 3.4205 12.7955C3.20952 13.0065 2.92337 13.125 2.625 13.125H1.875C1.57663 13.125 1.29048 13.0065 1.0795 12.7955C0.868526 12.5845 0.75 12.2984 0.75 12C0.75 11.7016 0.868526 11.4155 1.0795 11.2045C1.29048 10.9935 1.57663 10.875 1.875 10.875H2.625C2.92337 10.875 3.20952 10.9935 3.4205 11.2045C3.63147 11.4155 3.75 11.7016 3.75 12ZM4.04062 5.63437C3.82928 5.42303 3.71055 5.13639 3.71055 4.8375C3.71055 4.53861 3.82928 4.25197 4.04062 4.04062C4.25197 3.82928 4.53861 3.71055 4.8375 3.71055C5.13639 3.71055 5.42303 3.82928 5.63437 4.04062L6.16875 4.575C6.27363 4.67952 6.35685 4.80371 6.41363 4.94045C6.47041 5.0772 6.49964 5.22381 6.49964 5.37187C6.49964 5.51994 6.47041 5.66655 6.41363 5.8033C6.35685 5.94004 6.27363 6.06423 6.16875 6.16875C5.95607 6.37784 5.67012 6.49558 5.37187 6.49688C5.224 6.49724 5.07751 6.46844 4.94077 6.41214C4.80404 6.35584 4.67974 6.27313 4.575 6.16875L4.04062 5.63437Z"
                    fill="white"
                  />
                </g>
                <defs>
                  <clipPath id="clip0_302_2">
                    <rect width="24" height="24" fill="white" />
                  </clipPath>
                </defs>
              </svg>
            ) : (
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M21.3842 13.9781C21.3133 13.7457 21.1691 13.5424 20.9731 13.3987C20.777 13.2551 20.5397 13.1788 20.2967 13.1813C20.1914 13.1847 20.0871 13.2036 19.9873 13.2375C18.7097 13.5882 17.3619 13.5942 16.0812 13.2548C14.8005 12.9155 13.6326 12.2429 12.6962 11.3056C11.7598 10.3683 11.0885 9.19964 10.7504 7.91859C10.4124 6.63754 10.4197 5.2898 10.7717 4.01251C10.7934 3.92657 10.8059 3.83858 10.8092 3.75001C10.8223 3.51527 10.7615 3.28232 10.6354 3.0839C10.5093 2.88548 10.3242 2.73156 10.1061 2.64376C9.86964 2.55208 9.60996 2.53894 9.36546 2.60626C7.72751 3.06705 6.23867 3.94847 5.0469 5.16292C3.85513 6.37736 3.00193 7.88255 2.57209 9.52889C2.14226 11.1752 2.15074 12.9054 2.59672 14.5474C3.04269 16.1895 3.91063 17.6862 5.11426 18.8889C6.31789 20.0916 7.81531 20.9584 9.45769 21.4031C11.1001 21.8478 12.8303 21.8549 14.4763 21.4238C16.1223 20.9926 17.6268 20.1383 18.8403 18.9456C20.0538 17.7528 20.9341 16.2633 21.3936 14.625C21.4512 14.4128 21.448 14.1886 21.3842 13.9781ZM11.9998 19.5C10.3461 19.5022 8.73799 18.9577 7.42573 17.9513C6.11348 16.9449 5.17065 15.533 4.74394 13.9352C4.31723 12.3375 4.43057 10.6435 5.06632 9.1168C5.70207 7.59013 6.82458 6.3164 8.25921 5.49376C8.19066 6.85751 8.40877 8.22048 8.89947 9.49474C9.39017 10.769 10.1426 11.9262 11.1081 12.8918C12.0736 13.8573 13.2309 14.6097 14.5051 15.1004C15.7794 15.5911 17.1423 15.8092 18.5061 15.7406C17.8452 16.8816 16.8965 17.8292 15.7548 18.4889C14.6131 19.1486 13.3184 19.4972 11.9998 19.5Z"
                  fill="black"
                />
              </svg>
            )}
          </Box>
        </IconButton>
      </List>
    </Flex>
  );
};

const NavLink = ({
  id,
  text,
  setScrollToPage,
}: {
  id: number;
  text: string;
  setScrollToPage: (pageNum: number) => void;
}) => {
  return (
    <ListItem
      transform="translateX(0px)"
      transition="0.2s all ease-out"
      _hover={{ transform: "scale(1.1)" }}
      _active={{ transform: "scale(1.2)" }}
    >
      <Button
        textTransform="uppercase"
        _hover={{}}
        _active={{}}
        bg="none"
        p={0}
        fontSize="20px"
        onClick={() => setScrollToPage(id)}
        fontWeight={500}
      >
        {text}
      </Button>
    </ListItem>
  );
};

export default Header;
